from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import logging
import random

BOT_TOKEN = "7832938380:AAG80pCTkvRI0RkpzKbDUx7hVRcUN-55pHU"

# Accuracy counters
success = 61
fail = 15

# Real Pattern Logic
def detect_real_pattern(values):
    count_1x = sum(1 for x in values if x < 1.5)
    count_3x = sum(1 for x in values if 2.5 <= x < 4.0)
    count_5x = sum(1 for x in values if x >= 5.0)

    if count_1x >= 3:
        return "üî¥ Crash Pattern", 1.70, "Crash ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à ‚Äì ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§®‡§ø‡§ï‡§≤‡•ã!"
    elif count_5x >= 2:
        return "üü¢ High Multiplier Trend", 5.50, "High round ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à ‚Äì hold ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•ã!"
    elif count_3x >= 3:
        return "üü° Stable 3x Trend", 3.20, "Stable ‡§≤‡§ó ‡§∞‡§π‡§æ ‡§π‡•à ‚Äì 3x ‡§∏‡•á ‡§•‡•ã‡§°‡§º‡§æ ‡§ä‡§™‡§∞ ‡§®‡§ø‡§ï‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•ã‡•§"
    else:
        return "üü† Mixed/Unstable", 2.20, "Trend unclear ‡§π‡•à ‚Äì ‡§ú‡§≤‡•ç‡§¶‡•Ä profit ‡§≤‡•ã‡•§"

# Command: /predict
async def predict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        values = list(map(float, context.args))
        if len(values) < 5:
            await update.message.reply_text("‚ùó ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 5 multipliers ‡§¶‡•Ä‡§ú‡§ø‡§è‡•§\n‡§â‡§¶‡§æ‡§π‡§∞‡§£:\n/predict 1.2 3.4 2.1 1.9 5.5")
            return
        
        pattern, cashout, tip = detect_real_pattern(values)
        rate = round((success / (success + fail)) * 100, 2)

        message = f"""üéØ *Aviator Manual Prediction*  
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  
üìä *Input Rounds:* `{ ' | '.join(f"{x:.1f}x" for x in values) }`  
üìà *Pattern Detected:* {pattern}  

üí° *‡§∏‡•Å‡§ù‡§æ‡§µ:*  
üí∞ *{cashout}x* ‡§™‡§∞ Cashout ‡§ï‡§∞‡•ã!

üì¢ *Expert Tip:*  
"{tip}"

üìä *Success Stats:*  
‚úÖ ‡§∏‡§π‡•Ä: {success} | ‚ùå ‡§ó‡§≤‡§§: {fail}  
üéØ Success Rate: *{rate}%*

üß† *‡§π‡§∞ ‡§¨‡§æ‡§∞ ‡§®‡§Ø‡§æ ‡§ü‡•ç‡§∞‡•á‡§Ç‡§° ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à!*  
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"""
        await update.message.reply_text(message, parse_mode="Markdown")
    except:
        await update.message.reply_text("‚ùå Input invalid.\n‡§â‡§¶‡§æ‡§π‡§∞‡§£:\n/predict 1.3 2.4 3.5 2.1 1.9")

# Command: /accuracy
async def accuracy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total = success + fail
    rate = round((success / total) * 100, 2)
    await update.message.reply_text(
        f"üìä *Accuracy Report:*\n‚úÖ ‡§∏‡§π‡•Ä: {success} | ‚ùå ‡§ó‡§≤‡§§: {fail}\nüéØ Success Rate: *{rate}%*",
        parse_mode="Markdown"
    )

# Run bot
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("predict", predict))
    app.add_handler(CommandHandler("accuracy", accuracy))
    print("‚úÖ Bot is running...")
    app.run_polling()
